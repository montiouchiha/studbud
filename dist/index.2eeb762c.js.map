{"mappings":"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","sources":["public/player.js"],"sourcesContent":["// Select all the elements in the HTML page\r\n// and assign them to a variable\r\nlet now_playing = document.querySelector(\".now-playing\");\r\nlet track_art = document.querySelector(\".track-art\");\r\nlet track_name = document.querySelector(\".track-name\");\r\nlet track_artist = document.querySelector(\".track-artist\");\r\n  \r\nlet playpause_btn = document.querySelector(\".playpause-track\");\r\nlet next_btn = document.querySelector(\".next-track\");\r\nlet prev_btn = document.querySelector(\".prev-track\");\r\n  \r\nlet seek_slider = document.querySelector(\".seek_slider\");\r\nlet volume_slider = document.querySelector(\".volume_slider\");\r\nlet curr_time = document.querySelector(\".current-time\");\r\nlet total_duration = document.querySelector(\".total-duration\");\r\n  \r\n// Specify globally used values\r\nlet track_index = 0;\r\nlet isPlaying = false;\r\nlet updateTimer;\r\n  \r\n// Create the audio element for the player\r\nlet curr_track = document.createElement('audio');\r\n  \r\n// Define the list of tracks that have to be played\r\nlet track_list = [\r\n  {\r\n    name: \"Night Owl\",\r\n    artist: \"Broke For Free\",\r\n    image: \"Image URL\",\r\n    path: \"Night_Owl.mp3\"\r\n  },\r\n  {\r\n    name: \"Enthusiast\",\r\n    artist: \"Tours\",\r\n    image: \"Image URL\",\r\n    path: \"Enthusiast.mp3\"\r\n  },\r\n  {\r\n    name: \"Shipping Lanes\",\r\n    artist: \"Chad Crouch\",\r\n    image: \"Image URL\",\r\n    path: \"Shipping_Lanes.mp3\",\r\n  },\r\n];\r\n\r\nfunction loadTrack(track_index) {\r\n    // Clear the previous seek timer\r\n    clearInterval(updateTimer);\r\n    resetValues();\r\n    \r\n    // Load a new track\r\n    curr_track.src = track_list[track_index].path;\r\n    curr_track.load();\r\n    \r\n    // Update details of the track\r\n    track_art.style.backgroundImage = \r\n       \"url(\" + track_list[track_index].image + \")\";\r\n    track_name.textContent = track_list[track_index].name;\r\n    track_artist.textContent = track_list[track_index].artist;\r\n    now_playing.textContent = \r\n       \"PLAYING \" + (track_index + 1) + \" OF \" + track_list.length;\r\n    \r\n    // Set an interval of 1000 milliseconds\r\n    // for updating the seek slider\r\n    updateTimer = setInterval(seekUpdate, 1000);\r\n    \r\n    // Move to the next track if the current finishes playing\r\n    // using the 'ended' event\r\n    curr_track.addEventListener(\"ended\", nextTrack);\r\n    \r\n    // Apply a random background color\r\n    random_bg_color();\r\n  }\r\n    \r\n  function random_bg_color() {\r\n    // Get a random number between 64 to 256\r\n    // (for getting lighter colors)\r\n    let red = Math.floor(Math.random() * 256) + 64;\r\n    let green = Math.floor(Math.random() * 256) + 64;\r\n    let blue = Math.floor(Math.random() * 256) + 64;\r\n    \r\n    // Construct a color withe the given values\r\n    let bgColor = \"rgb(\" + red + \", \" + green + \", \" + blue + \")\";\r\n    \r\n    // Set the background to the new color\r\n    document.body.style.background = bgColor;\r\n  }\r\n    \r\n  // Function to reset all values to their default\r\n  function resetValues() {\r\n    curr_time.textContent = \"00:00\";\r\n    total_duration.textContent = \"00:00\";\r\n    seek_slider.value = 0;\r\n  }\r\n\r\n  function playpauseTrack() {\r\n    // Switch between playing and pausing\r\n    // depending on the current state\r\n    if (!isPlaying) playTrack();\r\n    else pauseTrack();\r\n  }\r\n    \r\n  function playTrack() {\r\n    // Play the loaded track\r\n    curr_track.play();\r\n    isPlaying = true;\r\n    \r\n    // Replace icon with the pause icon\r\n    playpause_btn.innerHTML = '<i class=\"fa fa-pause-circle fa-5x\"></i>';\r\n  }\r\n    \r\n  function pauseTrack() {\r\n    // Pause the loaded track\r\n    curr_track.pause();\r\n    isPlaying = false;\r\n    \r\n    // Replace icon with the play icon\r\n    playpause_btn.innerHTML = '<i class=\"fa fa-play-circle fa-5x\"></i>';\r\n  }\r\n    \r\n  function nextTrack() {\r\n    // Go back to the first track if the\r\n    // current one is the last in the track list\r\n    if (track_index < track_list.length - 1)\r\n      track_index += 1;\r\n    else track_index = 0;\r\n    \r\n    // Load and play the new track\r\n    loadTrack(track_index);\r\n    playTrack();\r\n  }\r\n    \r\n  function prevTrack() {\r\n    // Go back to the last track if the\r\n    // current one is the first in the track list\r\n    if (track_index > 0)\r\n      track_index -= 1;\r\n    else track_index = track_list.length - 1;\r\n      \r\n    // Load and play the new track\r\n    loadTrack(track_index);\r\n    playTrack();\r\n  }\r\n\r\n  \r\nfunction seekTo() {\r\n    // Calculate the seek position by the\r\n    // percentage of the seek slider \r\n    // and get the relative duration to the track\r\n    seekto = curr_track.duration * (seek_slider.value / 100);\r\n    \r\n    // Set the current track position to the calculated seek position\r\n    curr_track.currentTime = seekto;\r\n  }\r\n    \r\n  function setVolume() {\r\n    // Set the volume according to the\r\n    // percentage of the volume slider set\r\n    curr_track.volume = volume_slider.value / 100;\r\n  }\r\n    \r\n  function seekUpdate() {\r\n    let seekPosition = 0;\r\n    \r\n    // Check if the current track duration is a legible number\r\n    if (!isNaN(curr_track.duration)) {\r\n      seekPosition = curr_track.currentTime * (100 / curr_track.duration);\r\n      seek_slider.value = seekPosition;\r\n    \r\n      // Calculate the time left and the total duration\r\n      let currentMinutes = Math.floor(curr_track.currentTime / 60);\r\n      let currentSeconds = Math.floor(curr_track.currentTime - currentMinutes * 60);\r\n      let durationMinutes = Math.floor(curr_track.duration / 60);\r\n      let durationSeconds = Math.floor(curr_track.duration - durationMinutes * 60);\r\n    \r\n      // Add a zero to the single digit time values\r\n      if (currentSeconds < 10) { currentSeconds = \"0\" + currentSeconds; }\r\n      if (durationSeconds < 10) { durationSeconds = \"0\" + durationSeconds; }\r\n      if (currentMinutes < 10) { currentMinutes = \"0\" + currentMinutes; }\r\n      if (durationMinutes < 10) { durationMinutes = \"0\" + durationMinutes; }\r\n    \r\n      // Display the updated duration\r\n      curr_time.textContent = currentMinutes + \":\" + currentSeconds;\r\n      total_duration.textContent = durationMinutes + \":\" + durationSeconds;\r\n    }\r\n  }"],"names":[],"version":3,"file":"index.2eeb762c.js.map","sourceRoot":"/__parcel_source_root/"}